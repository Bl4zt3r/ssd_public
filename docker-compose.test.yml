services:
  postgis:
    image: postgis/postgis
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - ./postgis_volume:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/pg_hba.conf:/etc/postgresql/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10

  mqtt:
    image: eclipse-mosquitto
    volumes:
      - ./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf
    ports:
      - "1883:1883"

  worker:
    build: ./backend
    command: ["python", "-u", "app/worker.py"]
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgis
      MQTT_BROKER: mqtt
      MQTT_PORT: 1883
    depends_on:
      postgis:
        condition: service_healthy

  ingestor:
    build: ./backend
    command:
      ["uvicorn", "app.ingestor:app", "--host", "0.0.0.0", "--port", "8000"]
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgis
      MQTT_BROKER: mqtt
      MQTT_PORT: 1883
    depends_on:
      postgis:
        condition: service_healthy
    ports:
      - "8000:8000"

  backend:
    build: ./backend
    command:
      ["uvicorn", "app.backend:app", "--host", "0.0.0.0", "--port", "8001"]
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgis
      MQTT_BROKER: mqtt
      MQTT_PORT: 1883
    depends_on:
      postgis:
        condition: service_healthy
      ingestor:
        condition: service_started
    ports:
      - "8001:8001"

  frontend:
    build: ./frontend
    environment:
      UPSTREAM_HOST: backend
      UPSTREAM_PORT: 8001
    ports:
      - "3000:80"
    depends_on:
      - backend

  processing_node:
    build: ./processing-node
    environment:
      TZ: America/Santiago
      NODE_ID: NODO-GR-001
      CENTRAL_SERVER_URL: http://ingestor:8000/api/report
    volumes:
      - ./processing-node_volume:/db
    ports:
      - "5000:5000"

  sensor_simulator_c1a1:
    build: ./sensor-sim
    environment:
      TZ: America/Santiago
      CONTAINER_ID: CONTENEDOR-GR-C001
      SENSOR_ID: SENSOR-A001
      SERVER_ADDR: http://processing_node:5000

  sensor_simulator_c1a2:
    build: ./sensor-sim
    environment:
      TZ: America/Santiago
      CONTAINER_ID: CONTENEDOR-GR-C001
      SENSOR_ID: SENSOR-A002
      SERVER_ADDR: http://processing_node:5000

  sensor_simulator_c1a3:
    build: ./sensor-sim
    environment:
      TZ: America/Santiago
      CONTAINER_ID: CONTENEDOR-GR-C001
      SENSOR_ID: SENSOR-A003
      SERVER_ADDR: http://processing_node:5000
